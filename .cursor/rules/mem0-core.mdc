---
description:
globs:
alwaysApply: false
---
# Основные правила работы с памятью (mem0-MCP)

## ВАЖНО: Используй все три инструмента памяти!
- `add_memory`: Сохраняй важную информацию о проекте
- `search_memory`: Ищи информацию перед началом работы
- `delete_memory`: Удаляй устаревшие данные

## Основные требования
1. **Используй простые поисковые запросы** (1-3 ключевых слова)
2. **Сохраняй каждое важное решение**
3. **Проверяй память в начале сессии**
4. **Удаляй устаревшие записи**

## Идентификаторы (всегда используй их)
```typescript
userId: "heist1337", 
agentId: "cursor", 
appId: "bank_system_master"
```

## Примеры использования

### Поиск информации (ОБЯЗАТЕЛЬНО ПЕРЕД НАЧАЛОМ ЗАДАЧИ)
```typescript
await search_memory({
  query: "авторизация", // КОРОТКИЙ запрос из 1-3 ключевых слов
  userId: "heist1337",
  agentId: "cursor",
  appId: "bank_system_master"
});
```

### Сохранение кода или решения
```typescript
await add_memory({
  content: "Компонент TransactionList отображает список транзакций с пагинацией",
  userId: "heist1337",
  agentId: "cursor",
  appId: "bank_system_master",
  metadata: {
    type: "component",
    tags: ["ui", "transactions"],
    path: "components/TransactionList.tsx"
  }
});
```

### Удаление устаревшей информации
```typescript
await delete_memory({
  memoryId: "id-устаревшей-записи",
  userId: "heist1337",
  agentId: "cursor",
  appId: "bank_system_master"
});
```

## Категории для сохранения
- **код**: компоненты, функции, хуки
- **архитектура**: структура проекта, решения
- **требования**: требования к функциям
- **конфиг**: настройки, API-ключи

## Стратегия использования
1. **В начале задачи**: ВСЕГДА ищи связанную информацию через `search_memory`
2. **При создании кода**: сохраняй через `add_memory`
3. **При изменении кода**: удаляй устаревшее через `delete_memory`
4. **После завершения задачи**: сохраняй результат через `add_memory`
