# Правила использования Office Word MCP

## Цель
- Автоматизировать создание и редактирование документов Word
- Формировать структурированную проектную документацию
- Генерировать отчеты и технические задания
- Создавать документацию для пользователей

## Основные принципы

### Структура документов
- Используй шаблоны для разных типов документов
- Применяй стили для заголовков и форматирования
- Создавай оглавления и перекрестные ссылки
- Поддерживай единый стиль оформления

### Управление контентом
- Организуй содержимое в логические разделы
- Используй таблицы для структурированных данных
- Применяй нумерованные и маркированные списки
- Включай визуальные элементы (схемы, диаграммы)

### Интеграция с проектом
- Синхронизируй документацию с кодовой базой
- Обновляй документы при изменении требований
- Включай ссылки на соответствующие репозитории и ресурсы
- Документируй архитектурные решения и обоснования

## Типичные сценарии

### Создание технического задания
```typescript
await word_create_document({
  title: "Техническое задание - Банковская система",
  template: "technical_specification",
  sections: [
    {
      title: "1. Введение",
      content: "Данный документ описывает требования к разработке банковской системы на базе Next.js и Supabase.",
      level: 1
    },
    {
      title: "1.1. Цель проекта",
      content: "Создание современной банковской системы с высокой производительностью и безопасностью.",
      level: 2
    },
    {
      title: "1.2. Целевая аудитория",
      content: "Сотрудники банка, клиенты, администраторы системы.",
      level: 2
    },
    {
      title: "2. Функциональные требования",
      content: "",
      level: 1
    },
    {
      title: "2.1. Аутентификация и авторизация",
      content: `
Система должна обеспечивать:
- Регистрацию пользователей через email/пароль
- Вход через OAuth (Google, GitHub)
- Двухфакторную аутентификацию
- Восстановление пароля
- Разграничение доступа по ролям (клиент, менеджер, администратор)
      `,
      level: 2
    },
    // Дополнительные разделы...
  ],
  footer: {
    text: "© 2024 Bank System. Все права защищены.",
    includePageNumbers: true
  }
});
```

### Создание руководства пользователя
```typescript
await word_create_document({
  title: "Руководство пользователя - Банковская система",
  template: "user_guide",
  sections: [
    {
      title: "Введение",
      content: "Добро пожаловать в руководство пользователя банковской системы. Этот документ поможет вам ознакомиться с основными функциями и возможностями системы.",
      level: 1
    },
    {
      title: "Начало работы",
      content: "Для начала работы с системой необходимо выполнить вход в личный кабинет.",
      level: 1,
      subsections: [
        {
          title: "Регистрация",
          content: "Процесс регистрации включает следующие шаги...",
          level: 2,
          images: [
            {
              path: "/path/to/registration.png",
              caption: "Экран регистрации",
              width: "80%"
            }
          ]
        },
        {
          title: "Вход в систему",
          content: "Для входа в систему используйте свой email и пароль...",
          level: 2,
          images: [
            {
              path: "/path/to/login.png",
              caption: "Экран входа",
              width: "80%"
            }
          ]
        }
      ]
    },
    // Дополнительные разделы...
  ],
  tableOfContents: true,
  appendices: [
    {
      title: "Приложение A: Часто задаваемые вопросы",
      content: "Ответы на часто задаваемые вопросы..."
    },
    {
      title: "Приложение B: Глоссарий",
      content: "Термины и определения..."
    }
  ]
});
```

### Генерация отчета о тестировании
```typescript
await word_create_document({
  title: "Отчет о тестировании - Банковская система",
  template: "test_report",
  sections: [
    {
      title: "Резюме",
      content: "Данный отчет содержит результаты тестирования банковской системы версии 1.0.0.",
      level: 1
    },
    {
      title: "Методология тестирования",
      content: "Тестирование проводилось с использованием Jest для модульных тестов и Playwright для e2e тестирования.",
      level: 1
    },
    {
      title: "Результаты тестирования",
      content: "",
      level: 1,
      tables: [
        {
          title: "Сводка результатов тестирования",
          headers: ["Тип тестов", "Всего", "Пройдено", "Не пройдено", "Покрытие"],
          rows: [
            ["Модульные", "156", "153", "3", "92%"],
            ["Интеграционные", "47", "45", "2", "87%"],
            ["E2E", "18", "17", "1", "94%"]
          ]
        }
      ]
    },
    {
      title: "Выявленные проблемы",
      content: "В процессе тестирования были выявлены следующие проблемы:",
      level: 1,
      lists: [
        {
          type: "bulleted",
          items: [
            "Неправильная обработка ошибок при неудачной аутентификации",
            "Проблемы с адаптивностью на мобильных устройствах",
            "Задержки при загрузке транзакций в истории операций"
          ]
        }
      ]
    },
    // Дополнительные разделы...
  ],
  charts: [
    {
      title: "Распределение тестового покрытия",
      type: "pie",
      data: {
        labels: ["Аутентификация", "Управление счетами", "Транзакции", "Уведомления", "Отчеты"],
        values: [25, 30, 20, 15, 10]
      }
    }
  ]
});
```

### Создание архитектурного документа
```typescript
await word_create_document({
  title: "Архитектура банковской системы",
  template: "architecture_document",
  sections: [
    {
      title: "Обзор архитектуры",
      content: "Банковская система построена на основе микросервисной архитектуры с использованием Next.js и Supabase.",
      level: 1
    },
    {
      title: "Фронтенд",
      content: "Фронтенд реализован с использованием Next.js App Router и React Server Components.",
      level: 1,
      subsections: [
        {
          title: "Компонентная структура",
          content: "Компоненты организованы в соответствии с принципами атомарного дизайна.",
          level: 2,
          diagrams: [
            {
              type: "component",
              path: "/path/to/component_diagram.svg",
              caption: "Диаграмма компонентов"
            }
          ]
        },
        {
          title: "Маршрутизация",
          content: "Используется App Router для организации маршрутов.",
          level: 2
        }
      ]
    },
    {
      title: "Бэкенд",
      content: "Бэкенд реализован с использованием Supabase для хранения данных и авторизации.",
      level: 1,
      subsections: [
        {
          title: "Модель данных",
          content: "Основные сущности и их взаимосвязи.",
          level: 2,
          diagrams: [
            {
              type: "er",
              path: "/path/to/er_diagram.svg",
              caption: "ER-диаграмма"
            }
          ]
        },
        {
          title: "API",
          content: "REST API реализовано с использованием маршрутов Next.js API Routes.",
          level: 2
        }
      ]
    },
    // Дополнительные разделы...
  ],
  appendices: [
    {
      title: "Приложение A: Используемые технологии",
      content: "Список используемых технологий и их версий...",
      tables: [
        {
          title: "Технологический стек",
          headers: ["Технология", "Версия", "Назначение"],
          rows: [
            ["Next.js", "14.0.0", "Фреймворк для фронтенда"],
            ["Supabase", "2.39.0", "Бэкенд и база данных"],
            ["Tailwind CSS", "3.4.0", "Стилизация"],
            ["Shadcn UI", "0.5.0", "Компоненты UI"],
            ["React Hook Form", "7.46.0", "Управление формами"],
            ["Zod", "3.22.0", "Валидация"]
          ]
        }
      ]
    }
  ]
});
```

## Форматирование и стиль
- Используй последовательный стиль оформления
- Придерживайся фирменных цветов и шрифтов
- Применяй корпоративные шаблоны
- Обеспечивай единство терминологии

## Интеграция с другими MCP
- Используй Exa MCP для поиска справочной информации
- Применяй mem0 для сохранения ключевых требований
- Синхронизируйся с GitHub MCP для отслеживания задач
- Используй Desktop Commander для управления файлами документации