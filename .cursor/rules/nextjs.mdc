---
description: 
globs: 
alwaysApply: true
---
# Правила для Next.js

## Основные принципы
- Используй App Router и правильно различай серверные и клиентские компоненты
- Следуй функциональным и декларативным паттернам, избегай классов
- Предпочитай модуляризацию и переиспользование, избегай дублирования

## Структура и именование
- Используй строчные буквы с дефисами для директорий (например, `auth-wizard`)
- Файлы React-компонентов должны быть в PascalCase (например, `UserCard.tsx`)
- Используй только именованные экспорты для компонентов

## TypeScript
- Используй интерфейсы вместо типов, когда это возможно
- Избегай enums, используй const объекты или as const

## UI и стилизация
- Используй Tailwind CSS для стилизации
- Используй Shadcn UI для компонентов
- Применяй mobile-first подход и адаптивный дизайн

## Инструменты
- TanStack Query (react-query) для выборки данных
- React Hook Form для работы с формами
- Zod для валидации
- React Context для управления состоянием
- Prisma для доступа к базе данных

## Производительность
- Минимизируй использование 'use client', 'useEffect' и 'useState'
- Предпочитай React Server Components
- Оборачивай клиентские компоненты в Suspense с fallback
- Оптимизируй изображения с Next.js Image и ленивой загрузкой

## Маршрутизация и API
- Используй Next.js App Router для маршрутов и API
- Настраивай кэширование и ревалидацию через Next.js
- Используй route.ts для API-эндпоинтов

## Обработка ошибок
- Используй error boundaries и error.tsx
- Применяй loading.tsx для состояний загрузки

## Тестирование
- Обеспечивай 80% покрытие тестами с Jest
- Создавай файлы тестов (.spec.ts[x]) для каждого компонента
- Пиши e2e тесты для критичных процессов (Playwright)

## Кодстайл
- Следуй стандартам Airbnb + Prettier
- Запрещены: console.log, тип any, // eslint-disable

## Интеграции
- Supabase SDK для работы с данными
- Vercel AI SDK для AI-функций

## SEO
- Используй Next.js metadata API

## Язык
- Все интерфейсы и ответы должны быть на русском языке

