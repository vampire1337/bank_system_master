---
description: 
globs: 
alwaysApply: true
---
  - content: |
      # Правило для Next.js: Лучшие практики и стандарты
      ## Цель
      - Разработка на Next.js с использованием лучших практик и инструментов.

      ## Стандарты кодирования и структура
      - Пиши лаконичный TypeScript код с примерами.
      - Используй функциональные и декларативные паттерны, избегай классов.
      - Предпочитай модуляризацию и итерацию, а не дублирование.
      - Используй описательные имена (например, isLoading, hasError).
      - Структурируй файлы: компонент, подкомпоненты, хелперы, типы, контент.

      ## Именование
      - Используй строчные буквы с дефисами для директорий (например, auth-wizard).
      - Предпочитай именованные экспорты.

      ## TypeScript
      - Используй TypeScript везде, предпочитай интерфейсы типам.
      - Избегай enums, используй const или as const.
      - Пиши функциональные компоненты с интерфейсами.

      ## Синтаксис
      - Используй стрелочные функции для компонентов и обработчиков.
      - Избегай лишних скобок в условиях, пиши лаконично.
      - Используй декларативный JSX.

      ## UI и стилизация
      - Используй Shadcn UI, Radix и Tailwind CSS.
      - Применяй mobile-first подход и адаптивный дизайн.

      ## Производительность
      - Минимизируй 'use client', 'useEffect', 'useState', используй RSC.
      - Оборачивай клиентские компоненты в Suspense с fallback.
      - Применяй динамическую загрузку для некритичных компонентов.
      - Оптимизируй изображения с Next.js Image и ленивой загрузкой.

      ## Интеграция с Vercel AI SDK
      - Используй Vercel AI SDK для AI-фич.
      - Применяй AI SDK Core для генерации текста и вызовов LLM.
      - Используй AI SDK UI hooks для чатов.
      - Применяй AI SDK RSC для потокового UI.

      ## Базы данных
      - Используй Supabase SDK для работы с данными.
      - Создавай модели через Supabase schema builder.

      ## Маршрутизация и API
      - Используй Next.js App Router для маршрутов и API.
      - Настраивай кэширование и ревалидацию через Next.js.
      - Используй route.ts для API.

      ## Обработка ошибок и загрузки
      - Используй error boundaries и error.tsx.
      - Применяй loading.tsx для состояний загрузки.

      ## SEO
      - Используй Next.js metadata API.

      ## Язык
      - Все интерфейсы и ответы на русском языке.

      ## Кодстайл
      - Используй Airbnb + Prettier.
      - Запрещено: console.log, any, eslint-disable.

      ## Документация и Git
      - Поддерживай README.md, CHANGELOG.md, ADR.
      - Используй Conventional Commits.

      ## Mem0
      - Указывай userId, agentId, appId при add_memory.
      - Используй search_memory с фильтрами.

      ## Тестирование
      - Обеспечивай 80% покрытия тестами.
      - Используй Playwright для e2e-тестов.

    type: nextjs_guideline

    tags: [nextjs, typescript, react, supabase, tailwind, vercel-ai-sdk]