---
description: 
globs: 
alwaysApply: true
---
All user interfaces and responses must be in Russian.
Follow Next.js patterns, utilizing the App Router and correctly distinguishing between server and client components.
Use Tailwind CSS for styling.
Use Shadcn UI for UI components.
Use TanStack Query (react-query) for frontend data fetching.
Use React Hook Form for form handling.
Use Zod for validation.
Use React Context for state management.
Use Prisma for database access.
Name React files using PascalCase (e.g., UserCard.tsx).
Use only named exports for React components.
Testing

Ensure at least 80% test coverage with Jest.
Create test files (.spec.ts[x]) for each component and utility.
Write end-to-end (e2e) tests for critical workflows (MCP Playwright).
In continuous integration (CI), run npm run test && npm run build.
Code Style

Adhere to the Airbnb style guide with Prettier for formatting.
Use PascalCase for React component files and only named exports.
Prohibited: console.log, the any type, and // eslint-disable comments.
Follow conventions for Next.js App Router, Tailwind CSS, Shadcn UI, TanStack Query, React Hook Form, Zod, React Context, and Prisma.
Documentation and Git

Maintain up-to-date README.md and CHANGELOG.md files.
Document architectural decisions in docs/adr/ADR-xxxx.md.
Use Conventional Commits format: <type>: <summary>.
Squash trivial commits before merging; use force-push with caution.
Mem0 Integration

Utilize Mem0 tools: add_memory, search_memory, delete_memory.

Always include userId="heist1337", agentId="cursor", and appId=<repository_name>.

When adding memories, use the following template:

typescript

Копировать
add_memory(
  content = "Факт / конфигурация …",  // Use Russian for content
  metadata = {
    "version": "v2",
    "includes": "deployment, db",
    "immutable": true
  },
  appId = "current_repository_name"
)
Before generating code, search for relevant memories:

typescript

Копировать
search_memory(
  query = "конфигурации проекта",  // Use Russian for queries
  filters = { "appId": "my-project", "metadata.type": "project_config" }
)
Workflow

Plan: Describe the pages and database migrations needed.
Generate: Ensure the code passes linting, tests, and build processes.
Commit: Create one meaningful commit per feature or fix.
Tags: Use [e2e] and [deploy] tags where appropriate.
Restrictions

Do not modify CI configurations without a valid reason.
Do not disable linting or TypeScript checks.
Do not install global dependencies.
Use boilerplate code only when necessary.
Technical Recommendations

TypeScript: Prefer interfaces over types; avoid enums, use constant objects instead.
Error Handling: Implement early returns, guard clauses, and error boundaries.
Performance: Minimize the use of 'use client', 'useEffect', and 'setState'; prefer React Server Components.
UI: Use Shadcn UI, Radix, and Tailwind; design responsively with a mobile-first approach.
Data Fetching: Use the Supabase SDK for database interactions.
AI Integration: Leverage the Vercel AI SDK for AI-powered features.
SEO: Utilize the Next.js metadata API for search engine optimization.
Optional: NX Configuration

If using NX, enforce module boundaries with the following ESLint configuration:

{
  "@nx/enforce-module-boundaries": {
    "enforceBuildableLibDependency": true,
    "depConstraints": [
      { "sourceTag": "app", "onlyDependOnLibsWithTags": ["feature-*", "ui", "shared"] },
      { "sourceTag": "feature-*", "onlyDependOnLibsWithTags": ["ui", "shared"] },
      { "sourceTag": "ui", "onlyDependOnLibsWithTags": ["shared"] },
      { "sourceTag": "shared", "onlyDependOnLibsWithTags": ["shared"] }
    ]
  }

}