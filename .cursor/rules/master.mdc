---
description:
globs:
alwaysApply: false
---
# Качество кода с использованием mem0-MCP

## ВАЖНО: Используй память для повышения качества кода!

## Три ключевых правила
1. **ВСЕГДА начинай с поиска** - `search_memory()`
2. **Сохраняй каждое решение** - `add_memory()`
3. **Удаляй устаревшее** - `delete_memory()`

## Обязательные идентификаторы
```typescript
userId: "heist1337",
agentId: "cursor", 
appId: "bank_system_master"
```

## Циклы использования памяти

### 1. Перед написанием кода
```typescript
// ОБЯЗАТЕЛЬНО выполнять в начале работы!
const knowledge = await search_memory({
  query: "компонент таблица", // КОРОТКИЙ запрос
  userId: "heist1337",
  agentId: "cursor",
  appId: "bank_system_master"
});
```

### 2. После написания кода
```typescript
// Сохранение ПОСЛЕ завершения работы
await add_memory({
  content: "Компонент DataTable с сортировкой и фильтрацией",
  userId: "heist1337",
  agentId: "cursor", 
  appId: "bank_system_master",
  metadata: {
    type: "component",
    tags: ["table", "data", "ui"]
  }
});
```

### 3. При обновлении кода
```typescript
// Поиск и удаление устаревшей информации
const oldData = await search_memory({
  query: "таблица данных", // ПРОСТОЙ запрос
  userId: "heist1337"
});

if (oldData.length > 0) {
  await delete_memory({
    memoryId: oldData[0].id,
    userId: "heist1337"
  });
}
```

## Типы важной информации для сохранения
- **Компоненты UI** - структура, пропсы, состояние
- **Архитектурные решения** - паттерны, структуры данных
- **Конфигурации** - настройки API, маршрутизация
- **Исправления багов** - причины проблем, решения

## Практические советы
- Используй простые запросы из 1-3 слов
- Храни только важную информацию, не захламляй память
- Регулярно обновляй и чисти память
- Всегда проверяй память перед повторным использованием компонентов
